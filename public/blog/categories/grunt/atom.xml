<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Grunt | OpenTable Tech UK Blog]]></title>
  <link href="http://tech.opentable.co.uk/blog/categories/grunt/atom.xml" rel="self"/>
  <link href="http://tech.opentable.co.uk/"/>
  <updated>2015-02-07T14:21:51+00:00</updated>
  <id>http://tech.opentable.co.uk/</id>
  <author>
    <name><![CDATA[OpenTable]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Supporting IE8 in the OpenTable redesign]]></title>
    <link href="http://tech.opentable.co.uk/blog/2014/12/08/supporting-ie8-in-the-opentable-redesign/"/>
    <updated>2014-12-08T21:14:57+00:00</updated>
    <id>http://tech.opentable.co.uk/blog/2014/12/08/supporting-ie8-in-the-opentable-redesign</id>
    <content type="html"><![CDATA[<p>We&rsquo;re really <a href="http://blog.opentable.com/2014/opentables-website-re-designed-re-architected-re-imagined/">proud to have released</a> last week our redesigned <a href="http://www.opentable.co.uk">OpenTable</a> site, the culmination of months of hard work from many talented people here in London and in San Francisco.</p>

<p>However despite killing off our old site and its 2004 design, 2.8% of our visitors could have been crying into their keyboard as a far worse opentable.co.uk filled their screen.</p>

<p>That version of OpenTable was our new responsive site viewed in Internet Explorer 8.</p>

<p><img src="/images/posts/redesign-ie8.png" alt="Our redesign before we optimised for IE8" /></p>

<p>The fundamental issue is that IE8 doesn&rsquo;t support media queries so the age-old browser would try to stretch our <em>mobile-first</em> responsive design as wide as it could go &ndash; not great across a 27" Thunderbolt.</p>

<p>To solve the problem we first tried the <a href="https://github.com/scottjehl/Respond">Respond.js</a> polyfill but this didn&rsquo;t work as we&rsquo;d hoped.  The main issue appeared to be that because we serve our CSS and JS on a separate sub-domain we fell foul of the browser&rsquo;s cross-domain security.  We followed the Respond.js instructions to solve this but having no luck we looked for alternatives.</p>

<h2>Legacssy</h2>

<p>Further Googling lead us to <a href="https://github.com/robinpokorny/grunt-legacssy">Legacssy</a>. With this Grunt task we could create a IE8-only stylesheet and not have to serve extra JS and cross-domain proxy files to all visitors.</p>

<p>Our existing process is to create our core CSS with an <code>app.scss</code> file and <a href="https://github.com/sindresorhus/grunt-sass">grunt-sass</a>.  Our additional step was to create an <code>app_ie8.scss</code> file, parse it with <code>grunt-sass</code> like before, but then also run it through Legacssy.</p>

<h3>Our app.scss file</h3>

<pre><code>@import 'normalize';

@import 'components/global';

@import
  'components/icons',
  'components/buttons',
  'components/calendar',
  'components/forms',
  'components/pagination',
  'components/star-rating';

@import
  'partials/footer',
  'partials/header',
  'partials/location-picker';
</code></pre>

<h3>And our app_ie8.scss file</h3>

<pre><code>@import ‘app';
@import 'browsers/_ie8.scss';
</code></pre>

<p>This process left us with a duplicate of the main site CSS that would be IE8 friendly &ndash; and as you can see we are also able to merge in an IE8 specific stylesheet with further overrides.  All we now needed to was serve this inside conditional comments after the main stylesheet, and CSS specificity would ensure our IE rules overwrite the media queries.</p>

<p>```</p>

<p><!--[if lte IE 8]>
<link rel="stylesheet" href="//eu-srs.opentable.com/content/static/css/app_ie8.css" />
&lt;![endif]—>
```</p>

<h2>Drawbacks</h2>

<p>We are very happy with this solution as it generates the IE8 fixes as part of our automated build with no extra effort.  The only obvious negative is for the IE8 visitors who will effectively be downloading the same stylesheet twice, but if they are routinely browsing the web with IE8 this could be the least of their worries.</p>

<h2>Conclusion</h2>

<p>We&rsquo;re really proud of our new site; we&rsquo;re still ironing out some kinks but we hope that it&rsquo;s good enough for those of you who visit us with Internet Explorer 8 (probably through no fault of your own).</p>

<p>For the record, here a couple of other issues we found which may help other intrepid developers with their IE debugging in 2015 and beyond.</p>

<h3>Other IE8 issues</h3>

<ul>
<li>The other unsupported CSS values were rem units and RGBA colours.  After running Legacssy we used <a href="https://github.com/robwierzbowski/grunt-pixrem">pixrem.js</a> to replace rems with pixels and a custom task to replace RGBA values with their HEX equivalents.</li>
<li>IE11&rsquo;s F12 developer tools don&rsquo;t render identically to native IE8. We used Microsoft&rsquo;s excellent <a href="http://www.modern.ie">modern.ie</a> site to download virtual machines with Windows 7 and IE8.</li>
<li>We only tested on Windows 7 as this makes up 66% of our IE8 visitors. The remainder are on different operating systems which collectively only make up 0.95% of our total visitors; this is below our threshold for support.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grunt + Vagrant = Acceptance Test Heaven]]></title>
    <link href="http://tech.opentable.co.uk/blog/2013/08/16/grunt-plus-vagrant-equals-acceptance-test-heaven/"/>
    <updated>2013-08-16T15:32:00+01:00</updated>
    <id>http://tech.opentable.co.uk/blog/2013/08/16/grunt-plus-vagrant-equals-acceptance-test-heaven</id>
    <content type="html"><![CDATA[<p>My continued love affair with Grunt reached a new high the other day, when I combined <a href="http://www.vagrantup.com">Vagrant</a> with my <a href="http://tech.opentable.co.uk/blog/2013/08/08/grunt-your-deployments-too/">Grunt deployment tasks</a> and test runners.</p>

<p>I&rsquo;m not going to bang on about how great Vagrant is, because better people than me have already soliloquised at length on that subject. Let&rsquo;s just take it as writ that <strong>Vagrant is awesome</strong>.</p>

<p>The objective is simple, we want to have a virtualised environment to run our acceptance tests against, that we can create and provision on demand, to ensure that our acceptance tests only deal with functional-correctness, not data- or environment-correctness.</p>

<p>I created a set of Grunt tasks which were able to do the following:</p>

<ul>
<li>Spin up an provision a Vagrant instance</li>
<li>Deploy the project code</li>
<li>Start the server</li>
<li>Run the acceptance tests</li>
<li>Tear it all down</li>
</ul>


<p>All from a single command: <code>grunt acceptance</code></p>

<p>The price of this magic? About ten lines of Bash script, a six line Vagrantfile and some Grunt glue.</p>

<h2>Diving in</h2>

<p>Assuming you&rsquo;ve got Vagrant installed, you can create a Vagrantfile in the root of your project, which looks like this:</p>

<pre><code>Vagrant.configure("2") do |config|
    config.vm.box = "Ubuntu precise 64 VMWare"
    config.vm.box_url = "http://files.vagrantup.com/precise64_vmware.box"
    config.vm.network :forwarded_port, guest: 3000, host: 3000
    config.vm.provision :shell, :path =&gt; "setup/bootstrap.sh"
end
</code></pre>

<p>Notice the last line &lsquo;config.vm.provision&rsquo;, this tells Vagrant that there is a shell script at setup/bootstrap.sh which is going to provision your vm. You can provision the box with Puppet, Chef or a variety of other tools, but for the purposes of this simple testing machine, I&rsquo;m happy to use a shell script.</p>

<p>Let&rsquo;s have a look at the bootstrap file:</p>

<pre><code>apt-get update -y -q
apt-get install build-essential mongodb -y -q

cp /vagrant/tests/acceptance-tests/mongodb.conf /etc/mongodb.conf
service mongodb restart

wget --quiet http://nodejs.org/dist/v0.10.15/node-v0.10.15-linux-x64.tar.gz

tar -zxf node-v0.10.15-linux-x64.tar.gz

mv node-v0.10.15-linux-x64/ /opt/node/
ln -s /opt/node/bin/node /usr/bin/node
ln -s /opt/node/bin/npm /usr/bin/npm
</code></pre>

<p>After booting the VM, Vagrant will run this script, which will can do anything you need it to. All the commands run as root, so there&rsquo;s very little restriction as to what you can achieve.</p>

<p>We&rsquo;re installing Node.js (downloading the binaries manually because the version of Node in the Ubuntu repository is really old), and MongoDB (which our app depends on).</p>

<p>Note this line: <code>cp /vagrant/tests/acceptance-tests/mongodb.conf /etc/mongodb.conf</code> which installs a custom config for MongoDB.</p>

<p>By default, Vagrant will mount a share in /vagrant to the current directory (i.e. the directory on the host machine from which you executed <code>vagrant up</code>), you can map additional folders by adding <code>config.vm.synced_folder "path/on/host", "/path/on/guest"</code> to your Vagrantfile.</p>

<p>Now that we&rsquo;ve got our Vagrant config sorted, we can hook this into Grunt, using a bit of glue code.</p>

<pre><code>var shell = require('shelljs');

grunt.registerTask('vagrant-up', function(){
    shell.exec('vagrant up');
});

grunt.registerTask('vagrant-destroy', function(){
    shell.exec('vagrant destroy -f');
});
</code></pre>

<p>So now that we&rsquo;ve got our machine provisioned and booted, we can use Grunt to <a href="http://tech.opentable.co.uk/blog/2013/08/08/grunt-your-deployments-too/">deploy our code and start our service</a>.</p>

<p>Assuming that we&rsquo;ve got all that going on, we can move on to the next step, getting Grunt to deploy the code to the Vagrant box.</p>

<p>What I&rsquo;m going to do here is hook the deployment step into the &lsquo;vagrant-up&rsquo; task.</p>

<pre><code>grunt.registerTask('vagrant-up', function(){
    shell.exec('vagrant up');
    grunt.option('config', 'vagrant');
    grunt.task.run('deploy');
});
</code></pre>

<p>The reason for this is so that <code>grunt vagrant-up</code> will spin me up a provisioned box <em>and</em> install the code.</p>

<p>You&rsquo;ll notice that I set the &lsquo;config&rsquo; option inside the task, this option is required by the deploy task. I could specify it on the command line, but this is just friendlier and makes for a cleaner syntax of the command.</p>

<p>Now, when we run <code>grunt acceptance</code>, it&rsquo;ll do the following:</p>

<ul>
<li>Spin up the Vagrant box</li>
<li>Deploy the code</li>
<li>Tear it down again</li>
</ul>


<p>The only step remaining is to run our acceptance tests. For our app, we&rsquo;re using mocha, you can use anything so long as you&rsquo;ve got a Grunt task to drop in.</p>

<pre><code>var shell = require('shelljs');

grunt.initConfig({
    ...
    mochaTest: {
        options: {
            reporter: 'spec'
        },
        AcceptanceTests:{
            src: ['tests/acceptance-tests/**/*.js']
        }
    }
});

grunt.registerTask('deploy', [
    'sshexec:stop',
    'sshexec:make-release-dir',
    'sshexec:update-symlinks',
    'sftp:deploy',
    'sshexec:npm-update',
    'sshexec:set-config',
    'sshexec:start'
]);

grunt.registerTask('vagrant-up', function(){
    shell.exec('vagrant up');
    grunt.option('config', 'vagrant');
    grunt.task.run('deploy');
});

grunt.registerTask('vagrant-test', [ 'mochaTest:AcceptanceTests' ]);

grunt.registerTask('vagrant-destroy', function(){
    shell.exec('vagrant destroy -f');
});

grunt.registerTask('acceptance', [
    'vagrant-up',
    'vagrant-test',
    'vagrant-destroy'
]);
</code></pre>

<p>Ta-Da! Wasn&rsquo;t that painless?</p>

<p>The key part here is that everything is now in source control. So whenever someone checks out the project, it takes precisely <strong><em>one</em></strong> command to get the project going. No more time wasted configuring your dev machine to be able to run this, or that.</p>

<p>The machine is brand-new every time, with its own spangly MongoDB instance ready for use.</p>

<p>What&rsquo;s that I hear you whine? &ldquo;<em>My application depends on shared data, I can&rsquo;t use an empty database</em>&rdquo;. Not true. If you need it, set it up or mock it out. The acceptance tests should set-up and tear-down all their own data, if you rely on shared data sources for acceptance tests then you&rsquo;re going to have a painful time. Script it once and it&rsquo;ll forever be your friend. It&rsquo;s time to enter the dynamic era, no more false failures on your CI build because a shared datasource is missing and/or has been changed.</p>

<p>What&rsquo;s more you can now run <code>grunt acceptance</code> from anywhere and <strong><em>know</em></strong> that it&rsquo;ll be the same. No more environment pains!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grunt your deployments too]]></title>
    <link href="http://tech.opentable.co.uk/blog/2013/08/08/grunt-your-deployments-too/"/>
    <updated>2013-08-08T15:27:00+01:00</updated>
    <id>http://tech.opentable.co.uk/blog/2013/08/08/grunt-your-deployments-too</id>
    <content type="html"><![CDATA[<p>We&rsquo;ve been using <a href="http://www.gruntjs.com">Grunt</a> as a build tool for our nodejs apps, and it&rsquo;s brilliant. It lints, it configures, it minifies, it tests and it packages.</p>

<p>As we move towards getting our first node app into production, we were looking at ways to deploy it. First we thought of <a href="http://www.capistranorb.com">Capistrano</a>.</p>

<p><strong><em>Capistrano</em></strong> is a fully featured deployment framework written in ruby and levering rake style tasks. It&rsquo;s extremely powerful and very robust, plus there is a <a href="https://github.com/loopj/capistrano-node-deploy">gem for node deployments</a>. Alas, it was not to be. After half a day of tail chasing and hoop jumping, it occurred to me that there must be an easier way. Capistrano was encouraging me to make my project fit their template, rather than allowing me to configure the deployment to match my project. When I dug down into the Capistrano source, I found that it was just using ssh and sftp to run remote commands and copy files. But we can simplify this process.</p>

<p><strong><em>Grunt</em></strong> has been great so far, so I started looking at deploying directly through grunt. We would be deploying to Ubuntu server boxes, so the only tools necessary are ssh and sftp.</p>

<p>There are Grunt modules for nearly <a href="https://npmjs.org/search?q=grunt">everything</a> (linting, minifying, testing, waiting, packaging, shell-exec'ing, tagging, etc.), and rather predictably, sshing (with sftp).</p>

<p><a href="https://github.com/andrewrjones/grunt-ssh">Grunt-ssh</a> provides tasks for executing remote ssh commands, and for copying files using ssh. Let&rsquo;s dive into some code.</p>

<p><strong><em>SSH commands</em></strong></p>

<p>This is going to go over some old ground (available on the Grunt-ssh <a href="https://github.com/andrewrjones/grunt-ssh">readme</a>), but we can build up the commands pretty quick.</p>

<p>This is the basic config for executing ssh commands from your Gruntfile:</p>

<p>```
module.exports = function(grunt) {</p>

<pre><code>grunt.initConfig({
    sshexec: {
  uptime: {
    command: "uptime",
    options: {
      host: "127.0.0.1",
      port: 22
      username: "myuser",
      password: "mypass"
    }
  }
}  
</code></pre>

<p>  });</p>

<p>  // Load the plugin that provides the &ldquo;sshexec&rdquo; task.
  grunt.loadNpmTasks(&lsquo;grunt-ssh&rsquo;);</p>

<p>  // Default task.
  grunt.registerTask(&lsquo;default&rsquo;, [&lsquo;sshexec:uptime&rsquo;]);</p>

<p>};
```</p>

<p>We&rsquo;ve registered a command, which we can invoke with:
<code>
grunt sshexec:uptime
</code></p>

<p>The Grunt-ssh module also provides the ability to specify multiple host configurations (shared between commands), and to select one at runtime:</p>

<p>```
grunt.initConfig({</p>

<pre><code>sshconfig: {
  qa: {
    host: "my.qa.server",
    port: 22,
    username: "user", 
    password: "password"
  },
  staging: {
    host: "my.staging.server",
    port: 22,
    username: "user",
    password: "password"
  }    
},
sshexec: {
  uptime: {
    command: "uptime"
  }
}  
</code></pre>

<p>});
<code>
So when we invoke the grunt task, we can specify a config:
</code>
grunt sshexec:uptime &mdash;config qa
<code>
Or we can set it programmatically (inside the Gruntfile)
</code>
grunt.option(&lsquo;config&rsquo;, &lsquo;qa&rsquo;);
```</p>

<p><strong><em>SFTP Tasks</em></strong></p>

<p>Grunt-ssh allows you to upload files via S<a href="FTP:">FTP:</a>
```
grunt.initConfig({</p>

<pre><code>sshconfig: {
  qa: {
    host: "my.qa.server",
    port: 22,
    username: "user", 
    password: "password",
    path: "/path/on/server"
  },
  staging: {
    host: "my.staging.server",
    port: 22,
    username: "user",
    password: "password",
    path: "/path/on/server"
  }    
},
sshexec: {
  uptime: {
    command: "uptime"
  }
}
sftp: {
  deploy: {
    files: {
      "./": "package/**"
    },
    options: {
      srcBasePath: "package/",
      createDirectories: true
    }
  }
}  
</code></pre>

<p>});
```</p>

<p>There are a couple of options here, so let&rsquo;s break it down:
<code>
files: {
  "./": "package/**"
}
</code></p>

<p>This will copy all files from the &ldquo;package/&rdquo; folder locally. If you want to specify only certain types of files, you can use grunt&rsquo;s standard <a href="https://github.com/gruntjs/grunt/wiki/grunt.file#globbing-patterns">file globbing</a>.</p>

<p><code>
srcBasePath: "package/"
</code>
Optionally strip off an initial part of the path (without it, files would upload to &ldquo;/path/on/server/package/&rdquo;).</p>

<p><strong><em>Putting it all together</em></strong>
We&rsquo;ve got all the component parts, now lets put it together (plus a few other cool bits).</p>

<p><em>Note: at the time of writing, there is a bug in Grunt-ssh where the sftp task does not use the shared sshconfig, so if you want the fixed code, use <a href="https://github.com/andyroyle/grunt-ssh">my fork</a> (there is a pull request outstanding)</em></p>

<p>This snippet assumes that:</p>

<ul>
<li>You can connect to your deployment server using ssh</li>
<li>You are deploying to /var/www/myapp</li>
<li>You are using <a href="https://github.com/nodejitsu/forever">forever</a> to run your app</li>
<li>Your application files are copied to ./package/</li>
</ul>


<p>(but, since we&rsquo;re just using bash commands, this is easily configurable)</p>

<p>```
var dirname = (new Date()).toISOString();</p>

<p>module.exports = function(grunt){
  grunt.initConfig({</p>

<pre><code>// our shared sshconfig
sshconfig: {
  qa: {
    host: "my.qa.server",
    port: 22,
    username: "user",
    password: "password",
    path: "/path/on/server"
  },
  staging: {
    host: "my.staging.server",
    port: 22,
    username: "user",
    password: "password",
    path: "/path/on/server"
  },
  production: {
    host: "&lt;%= grunt.option('server') %&gt;",
    port: 22,
    username: "&lt;%= grunt.option('username') %&gt;",
    password: "&lt;%= grunt.option('password') %&gt;",
    path: "/path/on/server"
  }
},
// define our ssh commands
sshexec: {
  start: {
    command: "cd /var/www/myapp/current &amp;&amp; forever start -o /var/www/myapp/current/logs/forever.out -e /var/www/myapp/current/logs/forever.err --append app.js"
  },
  stop: {
    command: "forever stop app.js",
    options: {
      ignoreErrors: true
   }
  },
  'make-release-dir': {
    command: "mkdir -m 777 -p /var/www/myapp/releases/" + dirname + "/logs"
  },
  'update-symlinks': {
    command: "rm -rf /var/www/myapp/current &amp;&amp; ln -s /var/www/myapp/releases/" + dirname + " /var/www/myapp/current"
  },
  'npm-update': {
    command: "cd /var/www/myapp/current &amp;&amp; npm update"
  },
  'set-config': {
    command: "mv -f /var/www/myapp/current/config/&lt;%= grunt.option('config') %&gt;.yml /var/www/myapp/current/config/default.yml"
  }
},
// our sftp file copy config
sftp: {
  deploy: {
    files: {
      "./": "package/**"
    },
    options: {
      srcBasePath: "package/",
      createDirectories: true
    }
  }
}
</code></pre>

<p>  });</p>

<p>  grunt.loadNpmTasks(&lsquo;grunt-ssh&rsquo;);
  grunt.registerTask(&lsquo;deploy&rsquo;, [</p>

<pre><code>'sshexec:stop',
'sshexec:make-release-dir',
'sshexec:update-symlinks',
'sftp:deploy',
'sshexec:npm-update',
'sshexec:set-config',
'sshexec:start'
</code></pre>

<p>  ]);
});
```</p>

<p>It should all make sense, the sshexec is just running remote ssh commands (making directories, starting and stopping using forever etc). Let&rsquo;s just re-iterate what this is doing:</p>

<ol>
<li><code>sshexec:stop</code>: stops the app (assumes you&rsquo;re using forever)</li>
<li><code>sshexec:make-release-dir</code>: this will create the folder /var/www/myapp/releases/[current-date-time]</li>
<li><code>sshexec:update-symlinks</code>: this will create a symlink from /var/www/myapp/current to the release folder we just created (this means that rolling back is just a case of changing the symlink back).</li>
<li><code>sftp:deploy</code>: copy the files into place</li>
<li><code>sshexec:npm-update</code>: installs any missing node modules</li>
<li><code>sshexec:set-config</code>: copy the environment configuration into place</li>
<li><code>sshexec:start</code>: start the application using forever, pointing the logs to /var/www/myapp/current/logs/</li>
</ol>


<p><strong><em>Deploying with one command</em></strong>
<code>
grunt deploy --config qa
</code></p>

<p>Also, if you noticed the <em>production</em> config I specified in that snippet, you&rsquo;ll see that I didn&rsquo;t include any host, username or password configs. The <code>grunt.option('value')</code> allows us to access the command line switches, which means we don&rsquo;t have to keep any sensitive passwords in source control; we can specify them on the command line.</p>

<p><code>
grunt deploy --config production --server my.production.server --username user --password password
</code></p>

<p>There are lots of other solutions to the problem of credentials, but this is by far the simplest. It&rsquo;s worth remembering the Grunt-ssh uses the ssh2 module, so by default it will look to <code>~/.ssh/</code> for keys when connecting without a password.</p>

<p><strong>But wait, there&rsquo;s more</strong></p>

<p>Basically any task you can think of is scriptable using grunt (and some combination of tools). Extra things that we&rsquo;ve added to our deployment process include:</p>

<ul>
<li>Removing the application server from the load-balancer before deploying (and pushing it back when the deployment is complete).</li>
<li>Making a http request to check the health of the service before going live.</li>
<li>Rollback from a single command</li>
</ul>


<p><strong>Oink, Oink &hellip;..</strong></p>
]]></content>
  </entry>
  
</feed>
