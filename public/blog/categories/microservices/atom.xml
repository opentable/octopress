<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Microservices | OpenTable Tech UK Blog]]></title>
  <link href="http://tech.opentable.co.uk/blog/categories/microservices/atom.xml" rel="self"/>
  <link href="http://tech.opentable.co.uk/"/>
  <updated>2016-04-28T09:43:24+01:00</updated>
  <id>http://tech.opentable.co.uk/</id>
  <author>
    <name><![CDATA[OpenTable]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenComponents - microservices in the front-end world]]></title>
    <link href="http://tech.opentable.co.uk/blog/2016/04/27/opencomponents-microservices-in-the-front-end-world/"/>
    <updated>2016-04-27T11:10:00+01:00</updated>
    <id>http://tech.opentable.co.uk/blog/2016/04/27/opencomponents-microservices-in-the-front-end-world</id>
    <content type="html"><![CDATA[<p>Many engineers work every day on opentable.com from our offices located in Europe, America, and Asia, pushing changes to production multiple times a day. Usually, this is very hard to achieve, in fact it took years for us to get to this point. <a href="http://tech.opentable.co.uk/blog/2015/02/09/dismantling-the-monolith-microsites-at-opentable/">I described in a previous article</a> how we dismantled our monolith in favour of a Microsites architecture. Since the publication of that blog post we have been working on something I believe to be quite unique, called <strong>OpenComponents</strong>.</p>

<h3>Another front-end framework?</h3>

<p>OpenComponents is a system to facilitate code sharing, reduce dependencies, and easily approach new features and experiments from the back-end to the front-end. To achieve this, it is based on the concept of using services as interfaces &ndash; enabling pages to render partial content that is located, executed and deployed independently.</p>

<p>OpenComponents is not <em>another SPA JS framework</em>; it is a set of conventions, patterns and tools to develop and quickly deploy fragments of front-end. In this perspective, it plays nicely with any existing architecture and framework in terms of front-end and back-end. Its purpose is to <strong>serve as delivery mechanism for a more modularised end-result in the front-end</strong>.</p>

<p>OC is been in production for more than a year at OpenTable and it is <a href="https://github.com/opentable/oc">fully open-sourced</a>.</p>

<h2>Â Overview</h2>

<p>OpenComponents involves two parts:</p>

<ul>
<li>The <strong>consumers</strong> are web pages that need fragments of HTML for rendering partial contents. Sometimes they need some content during server-side rendering, somethings when executing code in the browser.</li>
<li>The <strong>components</strong> are small units of isomorphic code mainly consisting of HTML, Javascript and CSS. They can optionally contain some logic, allowing a server-side Node.js closure to compose a model that is used to render the view. When rendered they are pieces of HTML, ready to be injected in any web page.</li>
</ul>


<p>The framework consists of three parts:</p>

<ul>
<li>The <strong>cli</strong> allows developers to create, develop, test, and publish components.</li>
<li>The <strong>library</strong> is where the components are stored after the publishing. When components depend on static resources (such as images, CSS files, etc.) these are stored, during packaging and publishing, in a publicly-exposed part of the library that serves as a CDN.</li>
<li>The <strong>registry</strong> is a REST API that is used to consume components. It is the entity that handles the traffic between the library and the consumers.</li>
</ul>


<p>In the following example, you can see how a web page looks like when including both a server-side rendered component (<em>header</em>) and client-side (still) unrendered component (<em>advert</em>):</p>

<p>```html
&lt;!DOCTYPE html>
  &hellip;
  &lt;oc-component href=&ldquo;//oc-registry.com/header/1.X.X&rdquo; data-rendered=&ldquo;true&rdquo;></p>

<pre><code>&lt;a href="http://tech.opentable.co.uk/"&gt;
  &lt;img src="//cdn.com/oc/header/1.2.3/img/logo.png" /&gt;
&lt;/a&gt;
</code></pre>

<p>  &lt;/oc-component>
  &hellip;
  <p>page content</p>
  &lt;oc-component href=&ldquo;//oc-registry.com/advert/~1.3.5/?type=bottom&rdquo;>
  &lt;/oc-component>
  &hellip;
  <script src="//oc-registry/oc-client/client.js"></script>
```</p>

<h3>Getting started</h3>

<p>The only prerequisite for creating a component is Node.js:</p>

<p><code>sh
$ npm install -g oc
$ mkdir components &amp;&amp; cd components
$ oc init my-component
</code></p>

<p>Components are folders containing the following files:</p>

<table style="margin-bottom:16px;">
    <tr>
        <th style="font-weight:bold;padding:5px 10px;border-bottom:1px solid #ccc;">File</th>
        <th style="font-weight:bold;padding:5px 10px;border-bottom:1px solid #ccc;">Description</th>
    </tr>
    <tr>
        <td style="padding:5px 10px;font-weight:bold;">package.json</td>
        <td style="padding:5px 10px;font-weight: inherit;">A common <a href="https://docs.npmjs.com/files/package.json" target="_blank">node's package.json</a>. An "oc" property contains some additional configuration.</td>
    </tr>
    <tr>
        <td style="padding:5px 10px;font-weight:bold;">view.html</td>
        <td style="padding:5px 10px;font-weight: inherit;">The view containing the markup. Currently Handlebars and Jade view engines are supported. It can contain some CSS under the &lt;style&gt; tag and client-side Javascript under the &lt;script&gt; tag.</td>
    </tr>
    <tr>
        <td style="padding:5px 10px;font-weight:bold;">server.js (optional)</td>
        <td style="padding:5px 10px;font-weight: inherit;">If the component has some logic, including consuming services, this is the entity that will produce the view-model to compile the view.</td>
    </tr>
    <tr>
        <td style="padding:5px 10px;font-weight:bold;">static files (optional)</td>
        <td style="padding:5px 10px;font-weight: inherit;">Images, Javascript, and files that will be referenced in the HTML markup.</td>
    </tr>
    <tr>
        <td style="padding:5px 10px;font-weight:bold;">*</td>
        <td style="padding:5px 10px;font-weight: inherit;">Any other files that will be useful for the development such as tests, docs, etc.</td>
    </tr>
</table>


<h2>Editing, debugging, testing</h2>

<p>To start a local test registry using a components' folder as a library with a watcher:
<code>sh
$ oc dev . 3030
</code></p>

<p>To see how the component looks like when consuming it:
<code>sh
$ oc preview http://localhost:3030/hello-world
</code></p>

<p>As soon as you make changes on the component, you will be able to refresh this page and see how it looks. This an example for a component that handles some minimal logic:</p>

<p>
```</p>

<!-- view.html -->


<div>Hello {{ name }}</div>


<p>```
</p>

<p>```js
// server.js
module.exports.data = function(context, callback){
  callback(null, {</p>

<pre><code>name: context.params.name || 'John Doe'
</code></pre>

<p>  });
};
```</p>

<p>To test this component, we can curl <code>http://localhost:3030/my-component/?name=Jack</code>.</p>

<h3>Publishing to a registry</h3>

<p>You will need an online registry connected to a library. A component with the same name and version cannot already exist on that registry.</p>

<p>```sh</p>

<h1>just once we create a link between the current folder and a registry endpoint</h1>

<p>$ oc registry add <a href="http://my-components-registry.mydomain.com">http://my-components-registry.mydomain.com</a></p>

<h1>then, ship it</h1>

<p>$ oc publish my-component/
```</p>

<p>Now, it should be available at <code>http://my-components-registry.mydomain.com/my-component</code>.</p>

<h2>Consuming components</h2>

<p>From a consumer&rsquo;s perspective, a component is an HTML fragment. You can render components just on the client-side, just on the server-side, or use the client-side rendering as failover strategy for when the server-side rendering fails (for example because the registry is not responding quickly or it is down).</p>

<p>You don&rsquo;t need Node.js to consume components on the server-side. The registry can provide rendered components so that you can consume them using any tech stack.</p>

<p>When published, components are immutable and semantic versioned. The registry allows consumers to get any version of the component: the latest patch, or minor version, etc. For instance, <code>http://registry.com/component</code> serves the latest version, and <code>http://registry.com/component/^1.2.5</code> serves the most recent major version for v1.</p>

<h3>Client-side rendering</h3>

<p>To make this happen, a components' registry has to be publicly available.
<code>html
&lt;!DOCTYPE html&gt;
  ...
  &lt;oc-component href="//my-components-registry.mydomain.com/hello-world/1.X.X"&gt;&lt;/oc-component&gt;
  ...
  &lt;script src="//my-components-registry.mydomain.com/oc-client/client.js" /&gt;
</code></p>

<h3>Server-side rendering</h3>

<p>You can get rendered components via the registry REST API.
```sh
curl <a href="http://my-components-registry.mydomain.com/hello-world">http://my-components-registry.mydomain.com/hello-world</a></p>

<p>{
  &ldquo;href&rdquo;: &ldquo;<a href="https://my-components-registry.mydomain.com/hello-world">https://my-components-registry.mydomain.com/hello-world</a>&rdquo;,
  &ldquo;version&rdquo;: &ldquo;1.0.0&rdquo;,
  &ldquo;requestVersion&rdquo;: &ldquo;&rdquo;,
  &ldquo;html&rdquo;: &ldquo;&lt;oc-component href=\"<a href="https://my-components-registry.mydomain.com/hello-world%22">https://my-components-registry.mydomain.com/hello-world%22</a> data-hash=\"cad2a9671257d5033d2abfd739b1660993021d02\&rdquo; data-name=\&ldquo;hello-world\&rdquo; data-rendered=\&ldquo;true\&rdquo; data-version=\&ldquo;1.0.13\&rdquo;>Hello John doe!&lt;/oc-component>&ldquo;,
  "type&rdquo;: &ldquo;oc-component&rdquo;,
  &ldquo;renderMode&rdquo;: &ldquo;rendered&rdquo;
}
```</p>

<p>Nevertheless, for improving caching and response size, when doing browser rendering, or using the <code>node.js</code> client or any language capable of executing server-side Javascript the request will look more like:
```sh
 curl <a href="http://my-components-registry.mydomain.com/hello-world/~1.0.0">http://my-components-registry.mydomain.com/hello-world/~1.0.0</a> -H Accept:application/vnd.oc.unrendered+json</p>

<p>{
  &ldquo;href&rdquo;: &ldquo;<a href="https://my-components-registry.mydomain.com/hello-world/~1.0.0">https://my-components-registry.mydomain.com/hello-world/~1.0.0</a>&rdquo;,
  &ldquo;name&rdquo;: &ldquo;hello-world&rdquo;,
  &ldquo;version&rdquo;: &ldquo;1.0.0&rdquo;,
  &ldquo;requestVersion&rdquo;: &ldquo;~1.0.0&rdquo;,
  &ldquo;data&rdquo;: {</p>

<pre><code>"name": "John doe"
</code></pre>

<p>  },
  &ldquo;template&rdquo;: {</p>

<pre><code>"src": "https://s3.amazonaws.com/your-s3-bucket/components/hello-world/1.0.0/template.js",
"type": "handlebars",
"key": "cad2a9671257d5033d2abfd739b1660993021d02"
</code></pre>

<p>  },
  &ldquo;type&rdquo;: &ldquo;oc-component&rdquo;,
  &ldquo;renderMode&rdquo;: &ldquo;unrendered&rdquo;
}
```</p>

<p>Making a similar request it is possible to get the compiled view&rsquo;s url + the view-model as data. This is useful for caching the compiled view (taking advantage of components' immutability).</p>

<h2>Setup a registry</h2>

<p>The registry is a Node.js Express app that serves the components. It just needs an S3 account to be used as library.</p>

<p>First, create a dir and install OC:
<code>sh
$ mkdir oc-registry &amp;&amp; cd oc-registry
$ npm init
$ npm install oc --save
$ touch index.js
</code></p>

<p>This is how <code>index.js</code> will look like:</p>

<p>```js
var oc = require(&lsquo;oc&rsquo;);</p>

<p>var configuration = {
  verbosity: 0,
  baseUrl: &lsquo;<a href="https://my-components-registry.mydomain.com/">https://my-components-registry.mydomain.com/</a>&rsquo;,
  port: 3000,
  tempDir: &lsquo;./temp/&rsquo;,
  refreshInterval: 600,
  pollingInterval: 5,
  s3: {</p>

<pre><code>key: 'your-s3-key',
secret: 'your-s3-secret',
bucket: 'your-s3-bucket',
region: 'your-s3-region',
path: '//s3.amazonaws.com/your-s3-bucket/',
componentsDir: 'components'
</code></pre>

<p>  },
  env: { name: &lsquo;production&rsquo; }
};</p>

<p>var registry = new oc.Registry(configuration);</p>

<p>registry.start(function(err, app){
  if(err){</p>

<pre><code>console.log('Registry not started: ', err);
process.exit(1);
</code></pre>

<p>  }
});
```</p>

<h2>Conclusions</h2>

<p>After more than a year in production, OC is still evolving. These are some of the most powerful features:</p>

<ul>
<li>It <strong>enables developers to create and publish components very easily</strong>. None of the operations need any infrastructural work as the framework takes care, when packaging, of making each component <em>production-ready</em>.</li>
<li>It is <strong>framework agnostic</strong>. Microsites written in <em>C#</em>, <em>Node</em> and <em>Ruby</em> consume components on the server-side via the API. In the front-end, it is great for delivering neutral pieces of HTML but works well for Angular components and React views too.</li>
<li>It enables <strong>granular ownership</strong>. Many teams can own components and they all are discoverable via the same service.</li>
<li>Isomorphism is good for <strong>performance</strong>. It enables consumers to render things on the server-side when needed (mobile apps, SEO) and defer to the client-side contents that are not required on the first load (third-party widgets, adverts, SPA fragments).</li>
<li>Isomorphism is good for <strong>robustness</strong>. When something is going bad on the server-side (the registry is erroring or slow) it is possible to use client-side rendering as a fail-over mechanism. The Node.js client does this by default.</li>
<li>It is a good approach for <strong>experimentation</strong>. People can work closely to the business to create widgets that are capable of both getting data from back-end services and deliver them via rich UIs. We very often had teams that were able to create and instrument tests created via OC in less then 24 hours.</li>
<li>Semver and auto-generated documentation <strong>enforce clear contracts</strong>. Consumers can pick the version they want and component owners can keep clear what the contract is.</li>
<li>A more componentised front-end leads to write <strong>more easily destroyable code</strong>. As opposite of writing highly maintainable code, this approach promotes small iterations on very small, easily readable and testable units of code. In this perspective, recreating something from scratch is perfectly acceptable and recommended, as there is almost zero cost for a developer to start a new project and the infrastructure in place makes maintainance and deprecation as easy as a couple of clicks.</li>
</ul>


<p>If you wish to try or know more about OpenComponents, visit <a href="https://github.com/opentable/oc">OC&rsquo;s github page</a> or have a look at <a href="https://github.com/matteofigus/oc-components-examples">some component examples</a>. If you would give us some feedback, asks us question, or contribute to the project get in touch via the <a href="https://gitter.im/opentable/oc">gitter chat</a> or via <a href="mailto:oc@opentable.com">e-mail</a>. We would love to hear your thoughts about this project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hapi.js and SIGTERM]]></title>
    <link href="http://tech.opentable.co.uk/blog/2015/02/16/hapi-js-and-sigterm/"/>
    <updated>2015-02-16T10:32:42+00:00</updated>
    <id>http://tech.opentable.co.uk/blog/2015/02/16/hapi-js-and-sigterm</id>
    <content type="html"><![CDATA[<p>When we first stood up our hapi.js APIs, we wrote init scripts to start/stop them. Stopping the server, was simply a case of sending SIGKILL (causing the app to immediately exit).</p>

<p>Whilst this is fine for most cases, if we want our apps to be good Linux citizens, then they should terminate gracefully. Hapi.js has the handy <code>server.stop(...)</code> command (see docs <a href="http://hapijs.com/api#serverstopoptions-callback">here</a>) which will terminate the server gracefully. It will cause the server to respond to new connections with a 503 (server unavailable), and wait for existing connections to terminate (up to some specified timeout), before stopping the server and allowing the node.js process to exit. Perfect.</p>

<p>This makes our graceful shutdown code really simple:</p>

<p>```javascript
process.on(&lsquo;SIGTERM&rsquo;, function(){
  server.stop({ timeout: 5 * 1000}, function(){</p>

<pre><code>process.exit(0);
</code></pre>

<p>  });
});
```</p>

<p>When we see a SIGTERM, call <code>server.stop()</code>, then once the server has stopped, call <code>process.exit(0)</code>. Easy peasy.</p>

<h3>Throw a spanner in the works</h3>

<p>Whilst <code>server.stop()</code> is really useful, it has the problem that it immediately prevents the server from responding to new requests. In our case, that isn&rsquo;t particularly desirable. We use service-discovery, which means that the graceful termination of our app should run like this:</p>

<ul>
<li>SIGTERM</li>
<li>Unannounce from Service-Discovery</li>
<li><code>server.stop(...)</code></li>
<li><code>process.exit(0)</code></li>
</ul>


<p>Ideally we want the unannounce to happen before the server starts rejecting connections, in order to reduce the likelihood that clients will hit a server that is shutting down.</p>

<h3>Plugins to the rescue!</h3>

<p>Thanks to hapi.js&rsquo;s awesome plugin interface (<a href="http://t.co/GDw44SETfS">shameless self promotion</a>), we can do some magic to make the above possible.</p>

<p>I created a really simple plugin called <a href="https://www.npmjs.com/package/hapi-shutdown">hapi-shutdown</a> which will handle SIGTERM and then run triggers before calling <code>server.stop(...)</code>.</p>

<p>The idea is that it allows us to run the &lsquo;unannounce&rsquo; step, before <code>server.stop(...)</code> is called.</p>

<h3>How to use hapi-shutdown</h3>

<p>```javascript
server.register([
  {</p>

<pre><code>plugin: require('hapi-shutdown'),
options: {
  serverSpindownTime: 5000 // the timeout passed to server.stop(...)
}
</code></pre>

<p>  }],
  function(err){</p>

<pre><code>server.start(function(){

  server.plugins['hapi-shutdown'].register({
    taskname: 'do stuff',
    task: function(done){ 
      console.log('doing stuff before server.stop is called'); 
      done(); 
    },
    timeout: 2000 // time to wait before forcibly returning
  })
});
</code></pre>

<p>  });
```</p>

<p>The plugin exposes a <code>.register()</code> function which allows you to register your shutdown tasks. The tasks are named (to prevent multiple registrations), and each task must call the <code>done()</code> function. The <code>timeout</code> parameter is provided so that a task which never completes won&rsquo;t block the shutdown of the server.</p>

<p> Neat, huh?</p>

<h3>Hooking up unannounce using hapi-shutdown</h3>

<p>We now have a place to register our &lsquo;unannounce&rsquo; task. Our service-discovery code is wrapped in another plugin, which means we can use <code>server.dependency(...)</code>.</p>

<p>```javascript
// inside the plugin&rsquo;s register function</p>

<p>server.dependency(&lsquo;hapi-shutdown&rsquo;, function(_, cb){
  var err = server.plugins[&lsquo;hapi-shutdown&rsquo;].register({</p>

<pre><code>taskname: 'discovery-unannounce',
task: function(done){
  discovery.unannounce(function(){
    done();
  });
},
timeout: 10 * 1000
</code></pre>

<p>  });</p>

<p>  cb(err);
});
```</p>

<p><code>server.dependency(...)</code> allows us to specify that this plugin relies on another plugin (or list of plugins). If the dependent plugin is not registered before the server starts, then an exception is thrown.</p>

<p>Handily, <code>server.dependency(...)</code> also takes a callback function, which is invoked after all the dependencies have been registered, which means that you don&rsquo;t need to worry about ordering inside your <code>server.register(...)</code> code.</p>

<p>This allows our unannounce code to be decoupled from the actual business of shutting down the server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dismantling the monolith - Microsites at Opentable]]></title>
    <link href="http://tech.opentable.co.uk/blog/2015/02/09/dismantling-the-monolith-microsites-at-opentable/"/>
    <updated>2015-02-09T09:43:03+00:00</updated>
    <id>http://tech.opentable.co.uk/blog/2015/02/09/dismantling-the-monolith-microsites-at-opentable</id>
    <content type="html"><![CDATA[<p>A couple of years ago we started to break-up the code-base behind our consumer site <a href="http://www.opentable.com">opentable.com</a>, to smaller units of code, in order to improve our productivity. New teams were created with the goal of splitting up the logic that was powering the back-end and then bring to life new small services. Then, we started working on what we call <em>Microsites</em>.</p>

<h3>Microsites</h3>

<p>A microsite is a very small set of web-pages, or even a single one, that takes care of handling a very specific part of the system&rsquo;s domain logic. Examples are the <em>Search Results</em> page or the <em>Restaurant&rsquo;s Profile</em> page. Every microsite is an independently deployable unit of code, so it is easier to test, to deploy, and in consequence more resilient. Microsites are then all connected by a front-door service that handles the routing.</p>

<h3>Not a free ride</h3>

<p>When we deployed some microsites to production we immediately discovered a lot of pros:</p>

<ul>
<li>Bi-weekly deployments of the monolith became hundreds of deployments every week.</li>
<li>Not anymore a shared codebase for hundreds of engineers. Pull requests accepted, merged, and often deployed on the same day.</li>
<li>Teams experimenting and reiterating faster: product was happy.</li>
<li><em>Diversity</em> on tech stacks: teams were finally able to pick their own favourite web-stack, as soon as they were capable of deploying their code and taking care of it in terms of reliability and performance.</li>
<li>Robustness: when something was wrong with a microsite, everything else was fine.</li>
</ul>


<p>On the other hand, we soon realised that we introduced new problems on the system:</p>

<ul>
<li>Duplication: teams started duplicating a lot of code, specifically front-end components such as the header, the footer, etc.</li>
<li>Coordination: when we needed to change something on the header, for example, we were expecting to see the change live in different time frames, resulting in inconsistencies.</li>
<li>Performance: every microsite was hosting its own duplicated css, javascript libraries, and static resources; resulting as a big disadvantage for the end-user in terms of performance.</li>
</ul>


<h3>SRS &ndash; aka Site Resources Service</h3>

<p>To solve some of these problems we created a REST api to serve html snippets, that soon we started to call <em>components</em>. Main characteristics of the system are:</p>

<ul>
<li>We have components for shared parts of the website such as the header, the footer, and the adverts. When a change has to go live, we apply the change, we deploy, and we see the change live everywhere.</li>
<li>Output is in HTML format, so the integration is possible if the microsite is either a .NET MVC site or a node.js app.</li>
<li>We have components for the core CSS and the JS common libraries, so that all the microsites use the same resources and the browser can cache them making the navigation smooth.</li>
<li>The service takes care of hosting all the static resources in a separate CDN, so microsites don&rsquo;t have to host that resources.</li>
</ul>


<p>This is an example of a request to the <em>core</em> css component:
```sh
curl <a href="http://srs-sc.otenv.com/v1/com-2014/resource-includes/css">http://srs-sc.otenv.com/v1/com-2014/resource-includes/css</a></p>

<p>{
  &ldquo;href&rdquo;: &ldquo;<a href="http://srs-sc.otenv.com/v1/com-2014/resource-includes/css">http://srs-sc.otenv.com/v1/com-2014/resource-includes/css</a>&rdquo;,
  &ldquo;html&rdquo;: &ldquo;<link rel=\"stylesheet\" href=\"//na-srs.opentable.com/content/static-1.0.1388.0/css-new-min/app.css\" /><!--[if lte IE 8]><link rel=\"stylesheet\" href=\"//na-srs.opentable.com/content/static-1.0.1388.0/css-new-min/app_ie8.css\" /> &lt;![endif]&mdash;>&rdquo;,
  &ldquo;type&rdquo;:&ldquo;css&rdquo;
}
```</p>

<p>The downside of this approach is that there is a strict dependency with SRS for each microsite. On every request, a call to SRS has to be made, so <strong>we had to work hard to guarantee reliability and good performance</strong>.</p>

<h2>Conclusions</h2>

<p>When we tried the microsite approach we âtradedâ some of our code problems with some new cultural problems. We became more agile and we were working in a new different way, with the downside of having the <strong>need to more effectively coordinate more people</strong>. The consequence is that the <strong>way we were approaching the code</strong> evolved over time.</p>

<p>One year later, with the front-end (almost completely) living on micro-sites, and with the help of SRS, we are experimenting more effective ways to be resilient and robust, with the specific goal to allow teams to create their own components and share them with other teams in order to be independent, and use them to easily approach to A/B experiments.</p>

<p>In the next post I&rsquo;ll write about <a href="https://github.com/opentable/oc">OpenComponents</a>, an experimental framework we just open-sourced that is trying to address some of this needs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Proxying Services With Hapi.js]]></title>
    <link href="http://tech.opentable.co.uk/blog/2014/11/28/proxying-with-hapi/"/>
    <updated>2014-11-28T10:32:42+00:00</updated>
    <id>http://tech.opentable.co.uk/blog/2014/11/28/proxying-with-hapi</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve raved in the past about how awesome <a href="http://hapijs.com">hapi.js</a> is, but I&rsquo;m going to talk about just a specific case today.</p>

<p>We started off with just a couple of hapi.js apis. This was at a time when standing up new infrastructure was still a bit painful, so inevitably those apis ended up having more functionality in them than they should have. Now it&rsquo;s easy for us to get infrastructure, so we want to do more of it.</p>

<p>Our goal is to have lots of small(er) apis that just look after one specific piece (skillfully avoiding using the buzzword &lsquo;microservices&rsquo;).</p>

<p>When you want to split out functionality from one api to another, it can be a pain, especially if you have a lot of consumers who aren&rsquo;t particularly fast-moving or communicative. Or maybe you don&rsquo;t know all your consumers up front.</p>

<p>You&rsquo;ve got a couple of options here:</p>

<ul>
<li><p>Maintain the functionality in two places and slowly migrate consumers across</p></li>
<li><p>Use a proxy or routing layer in-front of the api to rewrite or redirect requests</p></li>
<li><p>Write code in your api to proxy requests to a different server</p></li>
</ul>


<p>The first two options are pretty icky, and frankly the third isn&rsquo;t all that great either. It all depends on you having the right framework. Do you see where I&rsquo;m going here?</p>

<h3>Enter Hapi.js</h3>

<p>Hapi.js has the concept of a &lsquo;proxy&rsquo; handler, which can transparently proxy requests to a different server.</p>

<p>```javascript
server.route([
  {</p>

<pre><code>method: 'GET',
path: '/foo',
handler: {
  proxy: {
    host: 'my-other-service.mydomain.com',
    port: 80,
    protocol: 'http',
    passThrough: true,
    xforward: true
  }
}
</code></pre>

<p>  }
]);
```</p>

<p>And boom, you&rsquo;re done. You can now safely delete <em>all</em> of that code from your api and move it. The <em>only</em> thing you need to have kicking about is that proxy handler code.</p>

<p>The <code>passthrough</code> setting specifies whether or not to preserve headers on the original request, and <code>xforward</code> tells hapi to add (or append) an &lsquo;x-forwarded-for&rsquo; header to the request.</p>

<p>The proxy handler is really powerful. It can rewrite the request (using <code>mapUri</code>), pass local-state (from the hapi instance) along, reject unauthorised requests, you can even hook into the response and monkey about with it if you want (using <code>onResponse</code>).</p>

<p>For full details, see the <a href="http://hapijs.com/api/v7.5.2#route-options">proxy section</a> of the route options.</p>
]]></content>
  </entry>
  
</feed>
