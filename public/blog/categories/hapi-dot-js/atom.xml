<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Hapi.js | OpenTable Tech UK Blog]]></title>
  <link href="http://tech.opentable.co.uk/blog/categories/hapi-dot-js/atom.xml" rel="self"/>
  <link href="http://tech.opentable.co.uk/"/>
  <updated>2016-04-28T09:43:24+01:00</updated>
  <id>http://tech.opentable.co.uk/</id>
  <author>
    <name><![CDATA[OpenTable]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hapi.js and SIGTERM]]></title>
    <link href="http://tech.opentable.co.uk/blog/2015/02/16/hapi-js-and-sigterm/"/>
    <updated>2015-02-16T10:32:42+00:00</updated>
    <id>http://tech.opentable.co.uk/blog/2015/02/16/hapi-js-and-sigterm</id>
    <content type="html"><![CDATA[<p>When we first stood up our hapi.js APIs, we wrote init scripts to start/stop them. Stopping the server, was simply a case of sending SIGKILL (causing the app to immediately exit).</p>

<p>Whilst this is fine for most cases, if we want our apps to be good Linux citizens, then they should terminate gracefully. Hapi.js has the handy <code>server.stop(...)</code> command (see docs <a href="http://hapijs.com/api#serverstopoptions-callback">here</a>) which will terminate the server gracefully. It will cause the server to respond to new connections with a 503 (server unavailable), and wait for existing connections to terminate (up to some specified timeout), before stopping the server and allowing the node.js process to exit. Perfect.</p>

<p>This makes our graceful shutdown code really simple:</p>

<p>```javascript
process.on(&lsquo;SIGTERM&rsquo;, function(){
  server.stop({ timeout: 5 * 1000}, function(){</p>

<pre><code>process.exit(0);
</code></pre>

<p>  });
});
```</p>

<p>When we see a SIGTERM, call <code>server.stop()</code>, then once the server has stopped, call <code>process.exit(0)</code>. Easy peasy.</p>

<h3>Throw a spanner in the works</h3>

<p>Whilst <code>server.stop()</code> is really useful, it has the problem that it immediately prevents the server from responding to new requests. In our case, that isn&rsquo;t particularly desirable. We use service-discovery, which means that the graceful termination of our app should run like this:</p>

<ul>
<li>SIGTERM</li>
<li>Unannounce from Service-Discovery</li>
<li><code>server.stop(...)</code></li>
<li><code>process.exit(0)</code></li>
</ul>


<p>Ideally we want the unannounce to happen before the server starts rejecting connections, in order to reduce the likelihood that clients will hit a server that is shutting down.</p>

<h3>Plugins to the rescue!</h3>

<p>Thanks to hapi.js&rsquo;s awesome plugin interface (<a href="http://t.co/GDw44SETfS">shameless self promotion</a>), we can do some magic to make the above possible.</p>

<p>I created a really simple plugin called <a href="https://www.npmjs.com/package/hapi-shutdown">hapi-shutdown</a> which will handle SIGTERM and then run triggers before calling <code>server.stop(...)</code>.</p>

<p>The idea is that it allows us to run the &lsquo;unannounce&rsquo; step, before <code>server.stop(...)</code> is called.</p>

<h3>How to use hapi-shutdown</h3>

<p>```javascript
server.register([
  {</p>

<pre><code>plugin: require('hapi-shutdown'),
options: {
  serverSpindownTime: 5000 // the timeout passed to server.stop(...)
}
</code></pre>

<p>  }],
  function(err){</p>

<pre><code>server.start(function(){

  server.plugins['hapi-shutdown'].register({
    taskname: 'do stuff',
    task: function(done){ 
      console.log('doing stuff before server.stop is called'); 
      done(); 
    },
    timeout: 2000 // time to wait before forcibly returning
  })
});
</code></pre>

<p>  });
```</p>

<p>The plugin exposes a <code>.register()</code> function which allows you to register your shutdown tasks. The tasks are named (to prevent multiple registrations), and each task must call the <code>done()</code> function. The <code>timeout</code> parameter is provided so that a task which never completes won&rsquo;t block the shutdown of the server.</p>

<p> Neat, huh?</p>

<h3>Hooking up unannounce using hapi-shutdown</h3>

<p>We now have a place to register our &lsquo;unannounce&rsquo; task. Our service-discovery code is wrapped in another plugin, which means we can use <code>server.dependency(...)</code>.</p>

<p>```javascript
// inside the plugin&rsquo;s register function</p>

<p>server.dependency(&lsquo;hapi-shutdown&rsquo;, function(_, cb){
  var err = server.plugins[&lsquo;hapi-shutdown&rsquo;].register({</p>

<pre><code>taskname: 'discovery-unannounce',
task: function(done){
  discovery.unannounce(function(){
    done();
  });
},
timeout: 10 * 1000
</code></pre>

<p>  });</p>

<p>  cb(err);
});
```</p>

<p><code>server.dependency(...)</code> allows us to specify that this plugin relies on another plugin (or list of plugins). If the dependent plugin is not registered before the server starts, then an exception is thrown.</p>

<p>Handily, <code>server.dependency(...)</code> also takes a callback function, which is invoked after all the dependencies have been registered, which means that you don&rsquo;t need to worry about ordering inside your <code>server.register(...)</code> code.</p>

<p>This allows our unannounce code to be decoupled from the actual business of shutting down the server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Proxying Services With Hapi.js]]></title>
    <link href="http://tech.opentable.co.uk/blog/2014/11/28/proxying-with-hapi/"/>
    <updated>2014-11-28T10:32:42+00:00</updated>
    <id>http://tech.opentable.co.uk/blog/2014/11/28/proxying-with-hapi</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve raved in the past about how awesome <a href="http://hapijs.com">hapi.js</a> is, but I&rsquo;m going to talk about just a specific case today.</p>

<p>We started off with just a couple of hapi.js apis. This was at a time when standing up new infrastructure was still a bit painful, so inevitably those apis ended up having more functionality in them than they should have. Now it&rsquo;s easy for us to get infrastructure, so we want to do more of it.</p>

<p>Our goal is to have lots of small(er) apis that just look after one specific piece (skillfully avoiding using the buzzword &lsquo;microservices&rsquo;).</p>

<p>When you want to split out functionality from one api to another, it can be a pain, especially if you have a lot of consumers who aren&rsquo;t particularly fast-moving or communicative. Or maybe you don&rsquo;t know all your consumers up front.</p>

<p>You&rsquo;ve got a couple of options here:</p>

<ul>
<li><p>Maintain the functionality in two places and slowly migrate consumers across</p></li>
<li><p>Use a proxy or routing layer in-front of the api to rewrite or redirect requests</p></li>
<li><p>Write code in your api to proxy requests to a different server</p></li>
</ul>


<p>The first two options are pretty icky, and frankly the third isn&rsquo;t all that great either. It all depends on you having the right framework. Do you see where I&rsquo;m going here?</p>

<h3>Enter Hapi.js</h3>

<p>Hapi.js has the concept of a &lsquo;proxy&rsquo; handler, which can transparently proxy requests to a different server.</p>

<p>```javascript
server.route([
  {</p>

<pre><code>method: 'GET',
path: '/foo',
handler: {
  proxy: {
    host: 'my-other-service.mydomain.com',
    port: 80,
    protocol: 'http',
    passThrough: true,
    xforward: true
  }
}
</code></pre>

<p>  }
]);
```</p>

<p>And boom, you&rsquo;re done. You can now safely delete <em>all</em> of that code from your api and move it. The <em>only</em> thing you need to have kicking about is that proxy handler code.</p>

<p>The <code>passthrough</code> setting specifies whether or not to preserve headers on the original request, and <code>xforward</code> tells hapi to add (or append) an &lsquo;x-forwarded-for&rsquo; header to the request.</p>

<p>The proxy handler is really powerful. It can rewrite the request (using <code>mapUri</code>), pass local-state (from the hapi instance) along, reject unauthorised requests, you can even hook into the response and monkey about with it if you want (using <code>onResponse</code>).</p>

<p>For full details, see the <a href="http://hapijs.com/api/v7.5.2#route-options">proxy section</a> of the route options.</p>
]]></content>
  </entry>
  
</feed>
